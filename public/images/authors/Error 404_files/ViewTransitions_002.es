import.meta.env = {"ASSETS_PREFIX": undefined, "BASE_URL": "/", "DEV": true, "MODE": "development", "PROD": false, "SITE": "https://bookworm-light-astro.vercel.app", "SSR": false};import { supportsViewTransitions, navigate } from "/@id/__x00__astro:transitions/client";
import { init } from "/node_modules/astro/dist/virtual-modules/prefetch.js?v=f93d7717";
function getFallback() {
  const el = document.querySelector('[name="astro-view-transitions-fallback"]');
  if (el) {
    return el.getAttribute("content");
  }
  return "animate";
}
function isReloadEl(el) {
  return el.dataset.astroReload !== void 0;
}
if (supportsViewTransitions || getFallback() !== "none") {
  if (import.meta.env.DEV && window.matchMedia("(prefers-reduced-motion)").matches) {
    console.warn(
      `[transitions]: all view transition animations, including fallback animation, are disabled as this device has the prefer-reduced-motion setting enabled.`
    );
  }
  document.addEventListener("click", (ev) => {
    let link = ev.target;
    if (ev.composed) {
      link = ev.composedPath()[0];
    }
    if (link instanceof Element) {
      link = link.closest("a, area");
    }
    if (!(link instanceof HTMLAnchorElement) && !(link instanceof SVGAElement) && !(link instanceof HTMLAreaElement))
      return;
    const linkTarget = link instanceof HTMLElement ? link.target : link.target.baseVal;
    const href = link instanceof HTMLElement ? link.href : link.href.baseVal;
    const origin = new URL(href, location.href).origin;
    if (isReloadEl(link) || link.hasAttribute("download") || !link.href || linkTarget && linkTarget !== "_self" || origin !== location.origin || ev.button !== 0 || // left clicks only
    ev.metaKey || // new tab (mac)
    ev.ctrlKey || // new tab (windows)
    ev.altKey || // download
    ev.shiftKey || // new window
    ev.defaultPrevented) {
      return;
    }
    ev.preventDefault();
    navigate(href, {
      history: link.dataset.astroHistory === "replace" ? "replace" : "auto",
      sourceElement: link
    });
  });
  document.addEventListener("submit", (ev) => {
    let el = ev.target;
    if (el.tagName !== "FORM" || ev.defaultPrevented || isReloadEl(el)) {
      return;
    }
    const form = el;
    const submitter = ev.submitter;
    const formData = new FormData(form, submitter);
    const formAction = typeof form.action === "string" ? form.action : form.getAttribute("action");
    const formMethod = typeof form.method === "string" ? form.method : form.getAttribute("method");
    let action = submitter?.getAttribute("formaction") ?? formAction ?? location.pathname;
    const method = submitter?.getAttribute("formmethod") ?? formMethod ?? "get";
    if (method === "dialog" || location.origin !== new URL(action, location.href).origin) {
      return;
    }
    const options = { sourceElement: submitter ?? form };
    if (method === "get") {
      const params = new URLSearchParams(formData);
      const url = new URL(action);
      url.search = params.toString();
      action = url.toString();
    } else {
      options.formData = formData;
    }
    ev.preventDefault();
    navigate(action, options);
  });
  if (!false) {
    init({ prefetchAll: true });
  }
}

//# sourceMappingURL=data:application/json;base64,